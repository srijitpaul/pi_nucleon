require "stdlib"

-- cvc  g0  g1  g2  g3 g5 id
-- qlua g3  g0  g1  g2 g5 gamma[0]

-- proton and antiproton

function proton_2pt(d, u)
  --          g0            g2            g5         
  local Cg5 = gamma{mu=2} * gamma{mu=0} 
  local Pp =  (1 + gamma{mu=3}) / 4
  local a2 = Pp * u
  local a3 = qcd.quarkContract13(Cg5 * d * Cg5, u )

return -(a2:spintrace() * a3:spintrace() + (a2 * a3):spintrace()):trace()
end

function antiproton_2pt(d, u)
  local Cg5 = gamma{mu=2} * gamma{mu=0}
  local Pm =  (1 - gamma{mu=3}) / 4
  local a2 = Pm * u
  local a3 = qcd.quarkContract13(Cg5* d * Cg5, u )
return -(a2:spintrace() * a3:spintrace() + (a2 * a3):spintrace()):trace()
end

-- delta and anti-delta

function deltapp_2pt( u, inp, out)
  --          g0            g2            gmu 
  corr_proj = {}
  local Cgin = gamma{mu=3} * gamma{mu=1} * gamma{mu=inp}
  local Cgout = gamma{mu=3} * gamma{mu=1} * gamma{mu=out}
  --  local Pp =  (1 + gamma{mu=3}) / 4
  local bar_sign = vector.real(4)
  bar_sign[0] =  1  -- x
  bar_sign[1] = -1  -- y
  bar_sign[2] =  1  -- z
  bar_sign[3] =  1  -- t

  local a2 = u

  local a3 = qcd.quarkContract13( Cgout * u * Cgin, u )
  local a4 = qcd.quarkContract13( u * Cgin, Cgout * u )
  local res = a2*((a3 + a4):spintrace())  + (a2 *( a3 + a4 ))

  a4 = a2 * Cgin
  a3 = qcd.quarkContract13( Cgout * u, u )
  res = res + (a4 * (a3 + a3:spintranspose()))


  for i=0, 15 do

  local Pp =  gamma{n=i}
  corr_proj[i] = (( Pp * res ):spintrace():trace()) * bar_sign[out]
  end

return corr_proj
end

--*********************************************************************
-- * run contractions
-- ********************************************************************
function contract_baryon_2pt(L, prop, src_loc, snk_momenta, aff_out)

  -- boundary phase
    boundary_phase = vector.complex(L[3])
    for it = 0, src_loc[3] - 1 do
        boundary_phase[it] = -1
    end
    for it = src_loc[3], L[3]-1 do
        boundary_phase[it] = 1
    end

    -- proton
    p2pt_fw = proton_2pt(prop, prop)

    for isnk, snk_mom in ipairs(snk_momenta) do
        local px = (2 * math.pi * snk_mom[1]) / L[0]
        local py = (2 * math.pi * snk_mom[2]) / L[1]
        local pz = (2 * math.pi * snk_mom[3]) / L[2]
        local w = ( (L:Real(L:pcoord(0)) - src_loc[0]) * px +
                    (L:Real(L:pcoord(1)) - src_loc[1]) * py +
                    (L:Real(L:pcoord(2)) - src_loc[2]) * pz):expi()
        local w2 = (p2pt_fw * w):sum(L:MultiSet(L[3], L:pcoord(3)))    
        local q2 = vector.complex(L[3])
        for i = 0, #w2 - 1 do                       -- print 2pt values
            it = ( i + src_loc[3] ) % L[3]
            q2[i] = w2[it] * boundary_phase[it]
              
        end
        name = string.format("/proton/fw/px%.2dpy%.2dpz%.2d/x%.2dy%.2dz%.2dt%.2d",
                           snk_mom[1], snk_mom[2], snk_mom[3], src_loc[0], src_loc[1], src_loc[2],src_loc[3])
        aff_out:write(name, q2)
                     
        
        w2=nil
              
        q2=nil
            
    end  -- of loop on snk_momenta
    -- delta 2-point
    for imu = 0, 3 do
        mu = (imu + 3) % 4
        for inu = 0, 3 do
            nu = (inu + 3) % 4

            dpp2pt_fw = deltapp_2pt(prop, mu, nu)


            for isnk, snk_mom in ipairs(snk_momenta) do
                local px = (2 * math.pi * snk_mom[1]) / L[0]
                local py = (2 * math.pi * snk_mom[2]) / L[1]
                local pz = (2 * math.pi * snk_mom[3]) / L[2]
                local w = ( (L:Real(L:pcoord(0)) - src_loc[0]) * px +
                            (L:Real(L:pcoord(1)) - src_loc[1]) * py +
                            (L:Real(L:pcoord(2)) - src_loc[2]) * pz):expi()
                for index = 0,15 do
                    local w2 = (dpp2pt_fw[index] * w):sum(L:MultiSet(L[3], L:pcoord(3)))    

                    local q2 = vector.complex(L[3])


                    for i = 0, #w2 - 1 do                       -- print 2pt values
                        it = ( i + src_loc[3] ) % L[3]
                        q2[i] = w2[it] * boundary_phase[it]

                                    
                    end

                    name = string.format("/deltapp/fw/proj%.2d/in%dout%d/px%.2dpy%.2dpz%.2d/x%.2dy%.2dz%.2dt%.2d",
                                        index, mu, nu,
                                        snk_mom[1], snk_mom[2], snk_mom[3], src_loc[0], src_loc[1], src_loc[2],src_loc[3])
                    aff_out:write(name, q2)

                    w2=nil
                    q2=nil
                end   -- of index of projectors
            end  -- of loop on snk_momenta
        end  -- of nu
    end  -- of mu

    boundary_phase = nil
end  -- contract_baryon_2pt
