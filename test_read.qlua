require "stdlib"
require "gauge"
require "ape-smear"
require "wuppertal-smear"
require "stout-smear"
require "qdpc_io"

-- ************************************************************************************
-- * INITIALIZE
-- ************************************************************************************

total_timer = timer("total time")

-- print parameters
printf("# [test_read] Dimensions                = %d %d %d %d\n", dims[1], dims[2], dims[3], dims[4])
printf("# [test_read] prefix to conf name       = %s\n", conf_name_prefix)
printf("# [test_read] suffix to conf name       = %s\n", conf_name_input_suffix)
printf("# [test_read] suffix to conf name       = %s\n", conf_name_output_suffix)
printf("# [test_read] Clover Inverter\n")
printf("#\t light quark mass               = %g\n", mq_l)
printf("#\t light quark kappa              = %g\n", kappa_l)
printf("#\t strange quark mass               = %g\n", mq_s)
printf("#\t strange quark kappa              = %g\n", kappa_s)
printf("#\t Boundary condition = %d, %d, %d, %d\n", quark_bc[1], quark_bc[2], quark_bc[3], quark_bc[4])
-- TODO: what are relevant parameters for the multigrid solver?
-- printf("#\t Epsilon inner / final    = %e / %e\n", eps_i, eps_f)
-- printf("#\t Solver max. iters inner / total = %d\n", max_iter_i / dirac_max_iter)


-- initialize the lattice
L = qcd.lattice(dims, {network=network_dims})

Nd = #L

volume = 1
for i = 0, #L - 1 do
  volume = volume * L[i]
end
printf("# [test_read] lattice volume = %d\n", volume)

-- initialize param set for writing propagators
write_param = {
  ["m_q"]         = mq_l,
  ["c_sw"]        = csw,
  ["ferm_bc"]     = quark_bc,
  ["ensemble"]    = "cl21_32_96_b6p1_m0p2850_m0p2450",
  ["cfg"]         = nconf,
  ["ape_alpha"]   = ape_alpha,
  ["ape_n"]       = ape_n,
  ["ape_accu"]    = ape_accu,
  ["ape_maxiter"] = ape_maxiter,
  ["wup_alpha"]   = wup_alpha,
  ["wup_n"]       = wup_n,
  ["action_type"] = "clover",
  ["stout_rho"]   = stout_rho,
  ["stout_n"]     = stout_n,
  ["solver_eps"]  = mg_max_relerr,
  ["src_pos"]     = {-1, -1, -1},
  ["src_t"]       = -1
}


-- propagator lists
light_propagator_list = {}


-- ************************************************************************************
-- * LOOP ON BASE SOURCE TIMESLICES
-- ************************************************************************************
for i_src, v_src in ipairs(source_locations) do

  local t   = v_src["t"]
  local pos = v_src["pos"]
  printf("# [test_read] base source location[%d] = (%d, %d, %d) t=%d\n", i_src, pos[1], pos[2], pos[3], t)

  for i_coherent = 0, n_coherent_source - 1 do

    local i_prop = ( i_src - 1) * n_coherent_source + i_coherent + 1
    printf("# [test_read] setting forward propagator no. %d\n", i_prop)

    -- * set original (i_coherent = 0) or coherent source location (i_coherent > 0)
   
    local t_coherent = ( t + i_coherent * (L[3]/n_coherent_source) ) % L[3]

    -- set the shifted, coherent source location
    local pos_coherent = {}
    pos_coherent[1] = ( pos[1]  + i_coherent * (L[0] / n_coherent_source) ) % L[0]
    pos_coherent[2] = ( pos[2]  + i_coherent * (L[1] / n_coherent_source) ) % L[1]
    pos_coherent[3] = ( pos[3]  + i_coherent * (L[2] / n_coherent_source) ) % L[2]

    local source_timeslice = t_coherent
    printf("# [test_read] coherent source timeslice = %d\n", source_timeslice)


    -- set a point source and smear the source

    local source = L:DiracPropagator()

    if read_forward_propagator then

      printf("# [test_read] reading light forward propagator\n")
      write_param["name"]    = light_propfile_prefix
      write_param["path"]    = light_propfile_path
      write_param["src_pos"] = pos_coherent
      write_param["src_t"]   = t_coherent
      light_propagator_list[i_prop] = read_propagator (L, write_param)
    end


  end  -- of loop on coherent source locations

end  -- end of loop on base source locations


total_timer("done")
