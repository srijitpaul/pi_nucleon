require "stdlib"
require "gauge"
require "ape-smear"
require "wuppertal-smear"
require "stout-smear"
require "qdpc_io"

-- ************************************************************************************
-- * nucleon and delta contractions
-- ************************************************************************************

-- ************************************************************************************
-- * INITIALIZE
-- ************************************************************************************

total_timer = timer("total time")

-- print parameters
printf("# [invert_contract_baryon] Dimensions                = %d %d %d %d\n", dims[1], dims[2], dims[3], dims[4])
printf("# [invert_contract_baryon] prefix to conf name       = %s\n", conf_name_prefix)
printf("# [invert_contract_baryon] suffix to conf name       = %s\n", conf_name_input_suffix)
printf("# [invert_contract_baryon] suffix to conf name       = %s\n", conf_name_output_suffix)
printf("# [invert_contract_baryon] Clover Inverter\n")
printf("#\t light quark mass               = %g\n", mq_l)
printf("#\t light quark kappa              = %g\n", kappa_l)
printf("#\t strange quark mass               = %g\n", mq_s)
printf("#\t strange quark kappa              = %g\n", kappa_s)
printf("#\t Boundary condition = %d, %d, %d, %d\n", quark_bc[1], quark_bc[2], quark_bc[3], quark_bc[4])
-- TODO: what are relevant parameters for the multigrid solver?
-- printf("#\t Epsilon inner / final    = %e / %e\n", eps_i, eps_f)
-- printf("#\t Solver max. iters inner / total = %d\n", max_iter_i / dirac_max_iter)


-- initialize the lattice
L = qcd.lattice(dims, {network=network_dims})

Nd = #L

volume = 1
for i = 0, #L - 1 do
  volume = volume * L[i]
end
printf("# [invert_contract_baryon] lattice volume = %d\n", volume)

-- initialize param set for writing propagators
write_param = {
  ["m_q"]         = mq_l,
  ["c_sw"]        = csw,
  ["ferm_bc"]     = quark_bc,
  ["ensemble"]    = ensemble_name,
  ["cfg"]         = nconf,
  ["ape_alpha"]   = ape_alpha,
  ["ape_n"]       = ape_n,
  ["ape_accu"]    = ape_accu,
  ["ape_maxiter"] = ape_maxiter,
  ["wup_alpha"]   = wup_alpha,
  ["wup_n"]       = wup_n,
  ["action_type"] = "clover",
  ["stout_rho"]   = stout_rho,
  ["stout_n"]     = stout_n,
  ["solver_eps"]  = mg_max_relerr,
  ["src_pos"]     = {-1, -1, -1},
  ["src_t"]       = -1
}


if stout_smear then
  -- read configuration
  conf_name = string.format("%s%d%s", conf_name_prefix, nconf, conf_name_input_suffix)
  printf("# [invert_contract_baryon] reading original gauge configuration from file %s\n", conf_name)

  u_load_timer = timer("u load")
  uorig = load_ildg(L, conf_name)
  u_load_timer("done")
  printf("# [invert_contract_baryon] Plaquette (original) = %12.10f\n", plaquette_full(uorig))

  -- smear the gauge configuration
  stout_timer = timer("stout smear")
  printf("# [invert_contract_baryon] Stout-smearing gauge field\n")
  ustout = stout_smear_4d(uorig, stout_rho, stout_n)
  printf("# [invert_contract_baryon] Plaquette (smeared) = %12.10f\n", plaquette_full(ustout))
  stout_timer("done")
else
  printf("[invert_contract_baryon] Error, need original gauge configuration for heavy quark sector\n")
  os.exit(2)
end


-- TEST
--[[
ustout = {}
for i = 0, #L - 1 do
  ustout[i+1] = L:ColorMatrix(complex(1,0))
end
uorig = ustout
--]]


-- APE-smear the configuration
if ape_n > 0 then
  uape = APE_smear(ustout, ape_alpha, ape_n, ape_accu, ape_maxiter, ape_orthdir)
  printf("# [invert_contract_baryon] Plaquette after (light quark) APE smearing = %12.10f\n", plaquette_full(uape))
end


solver_light = make_mg_solver (L, ustout, mg_block, mg_max_abserr, mg_max_relerr, quark_bc, kappa_l, csw )
-- TEST
--[[
function solver_light (v)
  L = v.lattice
  s = tostring(v)
  if string.find(s, "^QDP:DiracFermion") then
    dv = L:DiracFermion() 
  elseif string.find(s, "^QDP:DiracPropagator") then
    dv = L:DiracPropagator() 
  else
    printf("# [solver_light] Bad argument to solver: %s\n", s)
    os.exit(1)
  end
  dv:set(v)
  return dv
end
--]]


-- ************************************************************************************
-- * LOOP ON BASE SOURCE TIMESLICES
-- ************************************************************************************
for i_src, v_src in ipairs(source_locations) do

  local t   = v_src["t"]
  local pos = v_src["pos"]
  printf("# [invert_contract_baryon] base source location[%d] = (%d, %d, %d) t=%d\n", i_src, pos[1], pos[2], pos[3], t)

  for i_coherent = 0, n_coherent_source - 1 do
  -- for i_coherent = 0, 0 do

    local i_prop = ( i_src - 1) * n_coherent_source + i_coherent + 1
    printf("# [invert_contract_baryon] setting forward propagator no. %d\n", i_prop)

    -- * set original (i_coherent = 0) or coherent source location (i_coherent > 0)
   
    local t_coherent = ( t + i_coherent * (L[3]/n_coherent_source) ) % L[3]

    -- set the shifted, coherent source location
    local pos_coherent = {}
    pos_coherent[1] = ( pos[1]  + i_coherent * (L[0] / n_coherent_source) ) % L[0]
    pos_coherent[2] = ( pos[2]  + i_coherent * (L[1] / n_coherent_source) ) % L[1]
    pos_coherent[3] = ( pos[3]  + i_coherent * (L[2] / n_coherent_source) ) % L[2]

    local source_position = vector.int(4)
    source_position[0] = pos_coherent[1]
    source_position[1] = pos_coherent[2]
    source_position[2] = pos_coherent[3]
    source_position[3] = t_coherent

    printf("# [invert_contract_baryon] B - B contraction for source location[%d / %d] = (%d, %d, %d) t=%d\n", i_src, i_prop, 
        source_position[0], source_position[1], source_position[2], source_position[3]) 

    local name = string.format("%s.%.4d.t%.2d", "contract_baryon_2pt", nconf, t_coherent)
    printf("# [invert_contract_baryon] B - B 2pt output file %s\n", name)
    aw_b_b_2pt, am = qcd.aff.Writer(name)
    name = nil

    -- ************************************************************************************
    -- * INVERT POINT SOURCE
    -- ************************************************************************************

    -- set a point source and smear the source

    local light_propagator = L:DiracPropagator()

    if not read_forward_propagator then

      local source = L:DiracPropagator()
      -- source smearing for light propagator point source
      local stimer = timer("wuppertal source smearing")
      for icol  = 0, 2 do
      for ispin = 0, 3 do
        printf("# [invert_contract_baryon] setting / smearing point source  %d / %d - (c=%2d, s=%2d)\n", i_src, i_prop, icol, ispin)
        local dv  = L:DiracFermion()
        dv[{pos_coherent[1], pos_coherent[2], pos_coherent[3], t_coherent, c=icol, d=ispin}] = complex(1, 0)
        if wup_n > 0 then
          -- source smearing
          source[{c=icol,d=ispin}] = wuppertal_smear(uape, wup_alpha, wup_n, dv, 3)
        else
          source[{c=icol,d=ispin}] = dv
        end
      end
      end
      stimer("done")

      -- propagator
      local i_timer = timer("light forward inversion")
      light_propagator = solver_light(source)
      i_timer("done")

      -- write the propagator UNSMEARED
      if write_forward_propagator then
        write_param["name"]    = light_propfile_prefix
        write_param["src_pos"] = pos_coherent
        write_param["src_t"]   = t_coherent

        write_propagator (light_propagator, write_param)
      end

    else
      printf("# [invert_contract_baryon] reading light forward propagator\n")
      write_param["name"]    = light_propfile_prefix
      write_param["path"]    = light_propfile_path
      write_param["src_pos"] = pos_coherent
      write_param["src_t"]   = t_coherent
      light_propagator = read_propagator (L, write_param)
    end

    -- sink smearing for light propagator
    local light_propagator_smeared = L:DiracPropagator()
    local stimer = timer("wuppertal sink smearing")
    if wup_n > 0 then
      for icol  = 0, 2 do
      for ispin = 0, 3 do
        printf("# [invert_contract_baryon] smearing light propagator %d / %d - (c=%2d, s=%2d)\n", i_src, i_prop, icol, ispin)
        local dv = light_propagator[{c=icol,d=ispin}]
        -- sink smearing
        light_propagator_smeared[{c=icol,d=ispin}] = wuppertal_smear(uape, wup_alpha, wup_n, dv, 3)
      end
      end
    else
      light_propagator_smeared = light_propagator
    end
    stimer("done")

    -- ************************************************************************************
    -- * CONTRACTIONS 
    -- ************************************************************************************
    printf("# [invert_contract_baryon] B - B contraction for source location[%d / %d] = (%d, %d, %d) t=%d\n", i_src, i_prop, 
        source_position[0], source_position[1], source_position[2], source_position[3]) 

    local ctimer = timer("contract B-B")
    contract_baryon_2pt(L, light_propagator_smeared, source_position, sink_momentum_list, aw_b_b_2pt)
    ctimer("done")

    vector_gamma_index = {1,2,4,15}

    ctimer = timer("contract m-m")
    contract_vector_meson_2pt(L, light_propagator_smeared,       light_propagator_smeared,       source_position, sink_momentum_list, aw_b_b_2pt, "m-m")
    ctimer("done")

    aw_b_b_2pt:close()
  end  -- of loop on coherent source locations


end  -- end of loop on base source locations


total_timer("done")
