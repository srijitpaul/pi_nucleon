-- package.path = package.path .. ''
require "stdlib"
require "gauge"
-- require "lhpc-std"


function read_propagator (L, param)

  Popen = { method = "phdf5"}

  Pread = { lattice = L }

  if string.find(param.name, "forward") then
  filename = string.format("%s.%.4d.x%.2dy%.2dz%.2dt%.2d.h5", param.name, param.cfg, param.src_pos[1], param.src_pos[2], param.src_pos[3], param.src_t)
  elseif string.find(param.name, "twostep_sequential") then                     
  filename = string.format("%s.%.4d.x%.2dy%.2dz%.2dt%.2d.px%.2dpy%.2dpz%.2d.kx%.2dky%.2dkz%.2d.h5", param.name, param.cfg,
            param.src_pos[1], param.src_pos[2], param.src_pos[3], param.src_t,      
            param.mom[1], param.mom[2], param.mom[3], param.twostepmom[1], param.twostepmom[2], param.twostepmom[3])

  elseif string.find(param.name, "sequential") then

  filename = string.format("%s.%.4d.x%.2dy%.2dz%.2dt%.2d.px%.2dpy%.2dpz%.2d.h5", param.name, param.cfg,
      param.src_pos[1], param.src_pos[2], param.src_pos[3], param.src_t,
      param.mom[1], param.mom[2], param.mom[3])

  -- TEST
  -- filename = string.format("%s/%s.%.4d.x%.2dy%.2dz%.2dt%.2d.h5", param.path, param.name, param.cfg,
      --    param.src_pos[1], param.src_pos[2], param.src_pos[3], param.src_t)

  elseif string.find(param.name, "stochastic_source") then

  filename = string.format("%s/%s.%.4d.%.5d.h5", param.path, param.name, param.cfg, param.sample)

  elseif string.find(param.name, "stochastic_propagator") and not string.find(param.name, "oet") then

  filename = string.format("%s/%s.%.4d.%.5d.h5", param.path, param.name, param.cfg, param.sample)

  elseif string.find(param.name, "stochastic_propagator") and string.find(param.name, "oet") then

  filename = string.format("%s/%s.%.4d.t%.2d.%.5d.px%.2dpy%.2dpz%.2d.h5", param.path, param.name, param.cfg, param.src_t, param.sample,
      param.mom[1], param.mom[2], param.mom[3])

  else
os.exit(1)
  end

  printf("# [read_propagator] filename is %s\n", filename)

local h5_reader = qcd.hdf5.Reader(filename, Popen)

  local cur_timer = timer("read " .. param.name )

  if string.find(param.name, "stochastic_propagator") and string.find(param.name, "oet") then
  v = {}
  v[0] = h5_reader:read("/diracpropagator/s0/data", {lattice=L})
  v[1] = h5_reader:read("/diracpropagator/s1/data", {lattice=L})
  v[2] = h5_reader:read("/diracpropagator/s2/data", {lattice=L})
  v[3] = h5_reader:read("/diracpropagator/s3/data", {lattice=L})

  else
  v = h5_reader:read("/diracpropagator/data", Pread)
  end

h5_reader:close()


  cur_timer("done")

  return v
  end

function read_propagator_lime (L, param)

  if string.find(param.name, "forward") then
  filename = string.format("%s.%.4d.x%.2dy%.2dz%.2dt%.2d.lime", param.name, param.cfg, param.src_pos[1], param.src_pos[2], param.src_pos[3], param.src_t)
   elseif string.find(param.name, "twostep_sequential") then                     
   filename = string.format("%s.%.4d.x%.2dy%.2dz%.2dt%.2d.px%.2dpy%.2dpz%.2d.kx%.2dky%.2dkz%.2d.lime", param.name, param.cfg,
             param.src_pos[1], param.src_pos[2], param.src_pos[3], param.src_t,      
             param.mom[1], param.mom[2], param.mom[3], param.twostepmom[1], param.twostepmom[2], param.twostepmom[3])

  
  elseif string.find(param.name, "sequential") then
  filename = string.format("%s.%.4d.x%.2dy%.2dz%.2dt%.2d.px%.2dpy%.2dpz%.2d.lime", param.name, param.cfg,
      param.src_pos[1], param.src_pos[2], param.src_pos[3], param.src_t,
      param.mom[1], param.mom[2], param.mom[3])

  -- TEST
  -- filename = string.format("%s/%s.%.4d.x%.2dy%.2dz%.2dt%.2d.h5", param.path, param.name, param.cfg,
      --    param.src_pos[1], param.src_pos[2], param.src_pos[3], param.src_t)

  elseif string.find(param.name, "stochastic_source") then

  filename = string.format("%s.%.4d.%.5d.lime", param.name, param.cfg, param.sample)

  elseif string.find(param.name, "stochastic_propagator") and not string.find(param.name, "oet") then

  filename = string.format("%s.%.4d.%.5d.lime", param.name, param.cfg, param.sample)

  elseif string.find(param.name, "stochastic_propagator") and string.find(param.name, "oet") then

  filename = string.format("%s.%.4d.t%.2d.%.5d.px%.2dpy%.2dpz%.2d.s%.2d.lime", param.name, param.cfg, param.src_t, param.sample,
      param.mom[1], param.mom[2], param.mom[3],param.spin)

  else
os.exit(1)
  end
  if not string.find(param.name, "stochastic") then
    printf("# [read_propagator] filename is %s\n", filename)
    r_timer = timer(" propagator read")

    local nonstoch_reader, rinfo = qcd.qdpc.Reader(L, filename)

    local prop = L:DiracPropagator()
    local prop_info 
    for icol  = 0, 2 do
      for ispin = 0, 3 do

        prop[{c=icol, d=ispin}] = nonstoch_reader:DiracFermion()
        printf(" The norm of the Dirac Fermion with spin %d and color %d = %g\n",ispin, icol, prop[{c=icol, d=ispin}]:norm2()) 
      end
    end
  
    nonstoch_reader:close()
  
    r_timer("done")

    return prop
  else
    printf("# [read_fermion] filename is %s\n", filename)
    prop_timer = timer(" fermion read")

    local reader, rinfo = qcd.qdpc.Reader(L, filename)

    local prop = L:DiracFermion()
    local prop_info 
    print()
    prop = reader:DiracFermion()
    print()
    reader:close()

    prop_timer("done")
    return prop
  end  
  print()
--return prop
end 

function read_factors_aff (param, aff_reader)


    printf("Reading factor name: %s\n",param.name)
 
    if string.find(param.name, "xi-gf2-T", 1, true)then
        
        --printf("# [read_factor] filename is %s\n", filename)
        printf("# xi-gf2-T [read_factor] factor name is %s\n",param.name)
        local tag = string.format("%s/pi2x%.2dpi2y%.2dpi2z%.2d/sample%.2d/color_vector%.2d/gf2%.2d/PX%.1d_PY%.1d_PZ%.1d", 
                param.name, param.pi2[1], param.pi2[2], param.pi2[3], param.i_sample, param.icol, param.gf2_id, param.pf2[1], param.pf2[2], param.pf2[3]) 
        
        b1_xi = aff_reader:read(tag)
        return b1_xi
   end
   if string.find(param.name, "phi-gf1-U--U", 1, true) and string.find(param.filename, "oet") then
        
        --printf("# [read_factor] filename is %s\n", filename)
        printf("# phi-gf1-U--U [read_factor] factor name is %s\n",param.name)
        local tag = string.format("/%s/sample%.2d/spin%.2d/color_vector%.2d/gf1%.2d/PX%.1d_PY%.1d_PZ%.1d", 
                param.name, param.i_sample, param.kspin, param.icol, param.gf1_id, param.pf1[1], param.pf1[2], param.pf1[3]) 
        printf("%s\n", tag)
        b1_phi = aff_reader:read(tag)
      
        return b1_phi
   end
   if string.find(param.name, "phi-gf1-U--U", 1, true) and not string.find(param.filename, "oet") then
        
        --printf("# [read_factor] filename is %s\n", filename)
        printf("# phi-gf1-U--U [read_factor] factor name is %s\n",param.name)
        local tag = string.format("/%s/sample%.2d/color_vector%.2d/gf1%.2d/PX%.1d_PY%.1d_PZ%.1d", 
                param.name, param.i_sample, param.icol, param.gf1_id, param.pf1[1], param.pf1[2], param.pf1[3]) 
        printf("%s\n", tag)
        b1_phi = aff_reader:read(tag)
      
        return b1_phi
   end

   if string.find(param.name, "xi-gf2-U", 1, true)then
        
        --printf("# [read_factor] filename is %s\n", filename)
        printf("# xi-gf2-U [read_factor] factor name is %s\n",param.name)
        local tag = string.format("%s/sample%.2d/color_vector%.2d/gf2%.2d/PX%.1d_PY%.1d_PZ%.1d", 
                param.name, param.i_sample, param.icol, param.gf2_id, param.pf2[1], param.pf2[2], param.pf2[3]) 
        
        b1_xi = aff_reader:read(tag)
    
        return b1_xi
   end
   if string.find(param.name, "phi")  and string.find(param.name, "T")then

        
        --printf("# [read_factor] filename is %s\n", filename)
        printf("# [read_factor] factor name is %s\n",param.name)
        local tag = string.format("/%s/pi2x%.2dpi2y%.2dpi2z%.2d/sample%.2d/color_vector%.2d/gf1%.2d/PX%.1d_PY%.1d_PZ%.1d", 
                param.name, param.pi2[1], param.pi2[2], param.pi2[3],param.i_sample, param.icol, param.gf1_id, param.pf1[1], param.pf1[2], param.pf1[3]) 
        printf("%s\n", tag)
        b1_phi = aff_reader:read(tag)
     
        return b1_phi
   end
   if string.find(param.name, "phi--gf1-U-U", 1, true)then
        
        --printf("# [read_factor] filename is %s\n", filename)
        printf("# phi--gf1-U-U [read_factor] factor name is %s\n",param.name)
        local tag = string.format("/%s/sample%.2d/spin%.2d/color_vector%.2d/gf1%.2d/PX%.1d_PY%.1d_PZ%.1d", 
                param.name, param.i_sample, param.kspin, param.icol, param.gf1_id, param.pf1[1], param.pf1[2], param.pf1[3]) 
        printf("%s\n", tag)
        b1_phi = aff_reader:read(tag)
      
        return b1_phi
   end
   if string.find(param.name, "phi-gf2-U", 1, true)then
        
        --printf("# [read_factor] filename is %s\n", filename)
        printf("# phi-gf2-U [read_factor] factor name is %s\n",param.name)
        local tag = string.format("%s/pi2x%.2dpi2y%.2dpi2z%.2d/sample%.2d/spin%.2d/color_vector%.2d/gf2%.2d/PX%.1d_PY%.1d_PZ%.1d", 
                param.name, param.pi2[1], param.pi2[2], param.pi2[3], param.i_sample, param.kspin, param.icol, param.gf2_id, param.pf2[1], param.pf2[2], param.pf2[3]) 
        
               
        
        z1_xi = aff_reader:read(tag)
    
        return z1_xi
   end
   
end
