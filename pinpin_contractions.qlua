--package.path = '/home/srijit/Dropbox/spaul/softwares/build2/parts/qlua/tree/lhpc/?.qlua;/home/srijit/Dropbox/spaul/softwares/build2/parts/qlua/tree/qlib/?.qlua;' .. package.path
package.path = '/global/homes/s/srijitp/build/qlua_build_edison/build2/parts/qlua/tree/lhpc/?.qlua;/global/homes/s/srijitp/build/qlua_build_edison/build2/parts/qlua/tree/qlib/?.qlua;' .. package.path
require "stdlib"
require "gauge"
require "ape-smear"
require "wuppertal-smear"
require "stout-smear"
require "qdpc_io"
require "setup_util"
require "lhpc-std"
require "latvec"


-- ************************************************************************************
-- * INITIALIZE
-- ************************************************************************************

total_timer = timer("total time")

-- print parameters
printf("# [invert_contract_v3] Dimensions                = %d %d %d %d\n", dims[1], dims[2], dims[3], dims[4])
printf("# [invert_contract_v3] prefix to conf name       = %s\n", conf_name_prefix)
printf("# [invert_contract_v3] suffix to conf name       = %s\n", conf_name_input_suffix)
printf("# [invert_contract_v3] suffix to conf name       = %s\n", conf_name_output_suffix)
printf("# [invert_contract_v3] Clover Inverter\n")
printf("#\t light quark mass               = %g\n", mq_l)
printf("#\t light quark kappa              = %g\n", kappa_l)
printf("#\t strange quark mass               = %g\n", mq_s)
printf("#\t strange quark kappa              = %g\n", kappa_s)
printf("#\t Boundary condition = %d, %d, %d, %d\n", quark_bc[1], quark_bc[2], quark_bc[3], quark_bc[4])
-- TODO: what are relevant parameters for the multigrid solver?
-- printf("#\t Epsilon inner / final    = %e / %e\n", eps_i, eps_f)
-- printf("#\t Solver max. iters inner / total = %d\n", max_iter_i / dirac_max_iter)


    -- initialize the lattice
L = qcd.lattice(dims, {network=network_dims})

    Nd = #L

    volume = 1
    for i = 0, #L - 1 do
    volume = volume * L[i]
    end
    printf("# [invert_contract] lattice volume = %d\n", volume)

    -- initialize param set for writing propagators
    write_param = {
        ["m_q"]         = mq_l,
        ["c_sw"]        = csw,
        ["ferm_bc"]     = quark_bc,
        ["ensemble"]    = "beta3.31_2hex_24c48_ml-0.09530_mh-0.04",
        ["cfg"]         = nconf,
        ["ape_alpha"]   = ape_alpha,
        ["ape_n"]       = ape_n,
        ["ape_accu"]    = ape_accu,
        ["ape_maxiter"] = ape_maxiter,
        ["wup_alpha"]   = wup_alpha,
        ["wup_n"]       = wup_n,
        ["action_type"] = "clover",
        ["stout_rho"]   = stout_rho,
        ["stout_n"]     = stout_n,
        ["solver_eps"]  = mg_max_relerr,
        ["src_pos"]     = {-1, -1, -1},
        ["src_t"]       = -1
    }


if stout_smear then
-- read configuration
    conf_name = string.format("%s%d%s", conf_name_prefix, nconf, conf_name_input_suffix)
    printf("# [invert_contract] reading original gauge configuration from file %s\n", conf_name)

    u_load_timer = timer("u load")
    uorig = load_nersc(L, conf_name)
    u_load_timer("done")
    printf("# [invert_contract] Plaquette (original) = %12.10f\n", plaquette_full(uorig))

    -- smear the gauge configuration
    stout_timer = timer("stout smear")
    printf("# [invert_contract] Stout-smearing gauge field\n")
    ustout = stout_smear_4d(uorig, stout_rho, stout_n)
    printf("# [invert_contract] Plaquette (smeared) = %12.10f\n", plaquette_full(ustout))
    stout_timer("done")
else
    -- read configuration
    conf_name = string.format("%s%d%s", conf_name_prefix, nconf, conf_name_output_suffix)
    printf("# [invert_contract] reading 4d-stout-smeared gauge configuration from file %s\n", conf_name)

    u_load_timer = timer("u load")
    ustout = load_ildg(L, conf_name)
    u_load_timer("done")
    printf("# [invert_contract] Plaquette (4d-stout-smeared) = %12.10f\n", plaquette_full(ustout))
    --printf("[invert_contract] Error, need original gauge configuration for heavy quark sector\n")
    os.exit(2)
end

    --[[
        -- TEST
        ustout = {}
        for i = 0, #L - 1 do
        ustout[i+1] = L:ColorMatrix(complex(1,0))
        end
        uorig = ustout
        --]]


-- APE-smear the configuration
if ape_n > 0 then
    ape_timer = timer("APE smearing")
    uape = APE_smear(ustout, ape_alpha, ape_n, ape_accu, ape_maxiter, ape_orthdir)
    ape_timer("done")
    printf("# [invert_contract] Plaquette after (light quark) APE smearing = %12.10f\n", plaquette_full(uape))
end
heavy_stout_timer = timer("heavy stout smear")
ustout_heavy = stout_smear_full(uorig, heavy_stout_rho, heavy_stout_n, 3)
heavy_stout_timer("done")
    -- TEST
    -- ustout_heavy = uorig
printf("# [invert_contract] Plaquette after (heavy quark) stout smearing = %12.10f\n", plaquette_full(ustout_heavy))


    -- TEST
if not ( read_stochastic_source and read_forward_propagator and read_sequential_propagator and read_propagator_oet) then
    solver_light = make_mg_solver (L, ustout, mg_block, mg_max_abserr, mg_max_relerr, quark_bc, kappa_l, csw )
end
--solver_heavy = make_aicl_solver(L, uorig, charm, bottom)


-- random number generator
S = random_state(L)

-- propagator lists
light_propagator_list = {}
light_propagator_smeared_list = {}
light_sequential_propagator_list = {}


-- ************************************************************************************
-- * LOOP ON BASE SOURCE TIMESLICES
-- ************************************************************************************
for i_src, v_src in ipairs(source_locations) do

    local t   = v_src["t"]
    local pos = v_src["pos"]
    printf("# [invert_contract_v3] base source location[%d] = (%d, %d, %d) t=%d\n", i_src, pos[1], pos[2], pos[3], t)



    local i_prop = i_src
    printf("# [invert_contract_v3] setting forward propagator no. %d\n", i_prop)


    local source_timeslice = t


    local source_position = vector.int(4)
    source_position[0] = pos[1]
    source_position[1] = pos[2]
    source_position[2] = pos[3]
    source_position[3] = t



-- ************************************************************************************
-- * INVERT POINT SOURCE
-- ************************************************************************************

-- set a point source and smear the source

    local source = L:DiracPropagator()

    if not read_forward_propagator then

        for icol  = 0, 2 do
            for ispin = 0, 3 do
                printf("# [invert_contract_v3] setting / smearing point source  %d / %d - (c=%2d, s=%2d)\n", i_src, i_prop, icol, ispin)
                local dv  = L:DiracFermion()
                dv[{pos[1], pos[2], pos[3], t, c=icol, d=ispin}] = complex(1, 0)
                if wup_n > 0 then
                    -- source smearing
                    source[{c=icol,d=ispin}] = wuppertal_smear(uape, wup_alpha, wup_n, dv, 3)
                else
                    source[{c=icol,d=ispin}] = dv
                end
            end
        end

        -- propagator
        local i_timer = timer("light forward inversion")
        light_propagator_list[i_prop] = solver_light(source)
        i_timer("done")

        -- write the propagator UNSMEARED
        if write_forward_propagator then
            write_param["name"]    = light_propfile_prefix
            write_param["src_pos"] = pos
            write_param["src_t"]   = t

            write_propagator_lime (light_propagator_list[i_prop], write_param)

        end

    else
        printf("# [invert_contract_v3] reading light forward propagator\n")
        write_param["name"]    = light_propfile_prefix
        write_param["src_pos"] = pos
        write_param["src_t"]   = t
        light_propagator_list[i_prop] = read_propagator_lime (L, write_param)
    end
    -- sink smearing of the light forward propagator                          
    light_propagator_smeared_list[i_prop] = {}
    local temp = L:DiracPropagator()
    if wup_n > 0 then 
        wup_smear = timer("wuppertal smearing")
        for icol  = 0, 2 do                                                     
            for ispin = 0, 3 do                                                     
                local dv = light_propagator_list[i_prop][{c=icol,d=ispin}]            
                temp[{c=icol, d=ispin}] = wuppertal_smear(uape, wup_alpha, wup_n, dv, 3)
            end                                                                     
        end                            
        wup_smear("done")
        light_propagator_smeared_list[i_prop] = temp
    else                                                                      
        light_propagator_smeared_list[i_prop]  = light_propagator_list[i_prop]               
    end 
    temp = nil
    -- ************************************************************************************
    -- * INVERT SEQUENTIAL SOURCE
    -- ************************************************************************************

    light_sequential_propagator_list[i_src] = {}

    for i_seq_mom, seq_mom in ipairs(sequential_source_momentum_list) do

        local seq_source_mom_timer = timer("seq_source_mom")
        printf("#[invert_contract]  sequential source momentum(%d) = (%d, %d, %d)\n", i_seq_mom, seq_mom[1], seq_mom[2], seq_mom[3])

        local seq_source_mom = L:DiracPropagator()


        if not read_sequential_propagator then

            -- local field exp(i p x)
            --   p = seq_mom sequential source momentum
            --   x = sink of light propagator
            local px = (2 * math.pi * seq_mom[1]) / L[0]
            local py = (2 * math.pi * seq_mom[2]) / L[1]
            local pz = (2 * math.pi * seq_mom[3]) / L[2]
            local phase = ( (L:Real(L:pcoord(0)) - pos[1]) * px +
                            (L:Real(L:pcoord(1)) - pos[2]) * py +
                            (L:Real(L:pcoord(2)) - pos[3]) * pz):expi()

            -- Dirac gamma matrix at sequential vertex, is always g5 (binary gamma id 15)
            local seq_gamma = sequential_source_gamma["val"]

            -- sequential source at t = propagator at t
            printf("# [invert_contract] adding source timeslice %d to sequential source list from propagator number %d\n", t, i_prop)
            L:Subset{axis=3, position = t}:where(function()
                seq_source_mom:set( light_propagator_list[i_prop] )
                end)
            -- seq_source_mom <- J exp(i p x) g5 J seq_source_mom
            for icol  = 0, 2 do
                for ispin = 0, 3 do
        

                    if wup_n > 0 then
                        printf("# [invert_contract_v2] smearing source + setting gamma x moentum + smearing source %d / %d - (c=%2d, s=%2d)\n", i_src, i_seq_mom, icol, ispin)
                        local dv = seq_source_mom[{c=icol,d=ispin}]
                        local dv2 = wuppertal_smear(uape, wup_alpha, wup_n, dv, 3)
                        dv = phase * ( seq_gamma * dv2 )
                        seq_source_mom[{c=icol,d=ispin}] = wuppertal_smear(uape, wup_alpha, wup_n, dv, 3)
                    else
                        printf("# [invert_contract] setting gamma x momentum %d / %d - (c=%2d, s=%2d)\n", i_src, i_seq_mom, icol, ispin)
                        seq_source_mom[{c=icol,d=ispin}] = phase * ( seq_gamma * seq_source_mom[{c=icol,d=ispin}] )


                    end

                end
            end
            seq_source_mom_timer("done")

            -- invert on the sequential momentum source
            local i_timer = timer("light sequential inversion")
            light_sequential_propagator_list[i_src][i_seq_mom] = solver_light(seq_source_mom)
            i_timer("done")

            -- write sequential propagator to file
            if write_sequential_propagator then
                write_param["name"]    = seq_propfile_prefix
                write_param["src_pos"] = pos
                write_param["src_t"]   = t
                write_param["mom"]     = seq_mom
                write_propagator_lime (light_sequential_propagator_list[i_src][i_seq_mom], write_param)

            end  -- of if write_sequential_propagator

        else
            printf("# [invert_contract] reading light sequential propagator\n")
            write_param["name"]    = seq_propfile_prefix
            write_param["path"]    = seq_propfile_path
            write_param["src_pos"] = pos
            write_param["src_t"]   = t
            write_param["mom"]     = seq_mom
            light_sequential_propagator_list[i_src][i_seq_mom] = read_propagator_lime (L, write_param)
            -- printf("Sequential Propagator for momenta (%d, %d, %d) =  %12.10f \n", 
                -- seq_mom[1], seq_mom[2], seq_mom[3], 
                --  print(light_sequential_propagator_list[i_src][i_seq_mom]:spintrace():trace():real():norm2())
        end





        --  sink smearing of sequential propagator
        --  can be smeared at this point, since for 2-point and 3-point functions we
        --  always use the sequential propagator smeared at source and sink
        if wup_n > 0 then
            for icol  = 0, 2 do
                for ispin = 0, 3 do
                    printf("# [invert_contract] smearing sequential propagator %d / %d - (c=%2d, s=%2d)\n", i_src, i_seq_mom, icol, ispin)
                    local dv = light_sequential_propagator_list[i_src][i_seq_mom][{c=icol, d=ispin}]
                    light_sequential_propagator_list[i_src][i_seq_mom][{c=icol, d=ispin}] = wuppertal_smear(uape, wup_alpha, wup_n, dv, 3)
                end
            end
              
        end
        
        seq_source_mom = nil

    end  -- end of loop on sequential source momenta
end  -- of loop on base source locations

-- ************************************************************************************
-- * INVERT STOCHASTIC SOURCE
-- ************************************************************************************


local light_stochastic_propagator_list = {}
for i_sample = 0, nsample - 1 do

    local light_stochastic_source = L:DiracFermion()
    local light_stochastic_propagator_smeared_allsink = L:DiracFermion()
    
    if not read_stochastic_source then
    -- make a Z2 x Z2 noise volume source
        light_stochastic_source = Z2_SpinComponent_DiracFermion(S, {0,1,2,3})
    
     

        if  write_stochastic_source then
            write_param["name"] = stochastic_sourcefile_prefix
            write_param["sample"] = i_sample
            write_propagator_lime(light_stochastic_source, write_param)
        end

    else
        -- read a stochastic source from disk
        printf("Reading stochastic source")
        write_param["name"] = stochastic_sourcefile_prefix
        write_param["path"] = stochastic_sourcefile_path
        write_param["sample"] = i_sample 
        light_stochastic_source = read_propagator_lime(L, write_param)

    end

    if not read_stochastic_propagator then

        light_stochastic_propagator_list[i_sample] = L:DiracFermion()
        printf("Writing stochastic propagator")
        for t = 0, L[3] - 1 do

            local source = L:DiracFermion()
            -- select stochastic source timeslice t from volume source
            L:Subset{axis=3, position=t}:where( function()
                source:set( light_stochastic_source )
                end)
      
            -- invert on the stochastic timeslice source
            -- light quark
            local v = L:DiracFermion()
            local inversion_time = timer("light stochastic propagator")
            v = solver_light(source)
            --light_stochastic_propagator_list[i_sample] = solver_light(source)
            inversion_time("done")
            L:Subset{axis=3, position=t}:where( function()
                light_stochastic_propagator_list[i_sample]:set( v )
                end)
            v = nil
            source = nil
        end


        if write_stochastic_propagator then
            printf("Writing stochastic propagator")
            --write_param["src_t"]  = t
            write_param["sample"] = i_sample

            write_param["name"]   = string.format("%s_light", stochastic_propfile_prefix)
            write_propagator_lime(light_stochastic_propagator_list[i_sample], write_param)

        end


    -- smear the stochastic timeslice propagator
    --   THE STOCHASTIC PROPAGATOR MUST NOT BE SMEARED AT THIS POINT, SINCE
    --   FOR THE CURRENT INSERTION WE NEED THE LOCAL PROPAGATOR SINK

    else
        printf("reading stochastic propagator for sample %d", i_sample)
        -- write_param["src_t"]  = t
        write_param["sample"] = i_sample
        write_param["path"]   = stochastic_propfile_path

        write_param["name"]   = string.format("%s_light", stochastic_propfile_prefix)
        -- TEST
        -- write_param["name"]   = string.format("%s", stochastic_propfile_prefix)
        light_stochastic_propagator_list[i_sample] = read_propagator_lime(L, write_param)
    end  -- of if not read_stochastic_propagator
    -- smear the stochastic source
    local light_stochastic_source_smeared = L:DiracFermion()
    -- source smearing for stochastic up / down source
    if wup_n > 0 then
        light_stochastic_source_smeared = wuppertal_smear(uape, wup_alpha, wup_n, light_stochastic_source, 3)
    else
        light_stochastic_source_smeared = light_stochastic_source
    end
  
  
    -- sink smearing of the light stochastic timeslice propagator                 
    if wup_n > 0 then                                                             
        light_stochastic_propagator_smeared_allsink = wuppertal_smear(uape, wup_alpha, wup_n, light_stochastic_propagator_list[i_sample], 3)
    end

end  -- of loop on base source locations

total_timer("done")
