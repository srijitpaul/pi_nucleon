--[[
function gi_dcovi (u, v) 

  local L = v.lattice
  s = tostring(v)

  if string.find(s, "^QDP:DiracFermion") then
    dv = L:DiracFermion()

    dv = gamma{mu=1} * ( u[1] * v:shift(1, "from_forward") - u[1]:shift(1,"from_backward"):adjoin() * v:shift(1, "from_backward") ) +
         gamma{mu=2} * ( u[2] * v:shift(2, "from_forward") - u[2]:shift(2,"from_backward"):adjoin() * v:shift(2, "from_backward") ) +
         gamma{mu=3} * ( u[3] * v:shift(3, "from_forward") - u[3]:shift(3,"from_backward"):adjoin() * v:shift(3, "from_backward") )

  elseif string.find(s, "^QDP:DiracPropagator") then
    dv = L:DiracPropagator()

    dv = gamma{mu=1} * ( u[1] * v:shift(1, "from_forward") - u[1]:shift(1,"from_backward"):adjoin() * v:shift(1, "from_backward") ) +
         gamma{mu=2} * ( u[2] * v:shift(2, "from_forward") - u[2]:shift(2,"from_backward"):adjoin() * v:shift(2, "from_backward") ) +
         gamma{mu=3} * ( u[3] * v:shift(3, "from_forward") - u[3]:shift(3,"from_backward"):adjoin() * v:shift(3, "from_backward") )
  else
    printf("# [] Error, need a DiracFermion or DiracPropagator")
    os.exit(1)
  end

  return dv * 0.5

end
--]]

function gi_dcovi (u, v) 

  local L = v.lattice
  s = tostring(v)

  if string.find(s, "^QDP:DiracFermion") then
    dv = L:DiracFermion()

    dv = gamma{mu=0} * ( u[1] * v:shift(0, "from_forward") - u[1]:shift(0,"from_backward"):adjoin() * v:shift(0, "from_backward") ) +
         gamma{mu=1} * ( u[2] * v:shift(1, "from_forward") - u[2]:shift(1,"from_backward"):adjoin() * v:shift(1, "from_backward") ) +
         gamma{mu=2} * ( u[3] * v:shift(2, "from_forward") - u[3]:shift(2,"from_backward"):adjoin() * v:shift(2, "from_backward") )

  elseif string.find(s, "^QDP:DiracPropagator") then
    dv = L:DiracPropagator()

    dv = gamma{mu=0} * ( u[1] * v:shift(0, "from_forward") - u[1]:shift(0,"from_backward"):adjoin() * v:shift(0, "from_backward") ) +
         gamma{mu=1} * ( u[2] * v:shift(1, "from_forward") - u[2]:shift(1,"from_backward"):adjoin() * v:shift(1, "from_backward") ) +
         gamma{mu=2} * ( u[3] * v:shift(2, "from_forward") - u[3]:shift(2,"from_backward"):adjoin() * v:shift(2, "from_backward") )
  else
    printf("# [gi_dcovi] Error, need a DiracFermion or DiracPropagator")
    os.exit(1)
  end

  return dv * 0.5

end
